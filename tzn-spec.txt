[- TZN Architecture Overview, Revision 1 -]

-- To Reader --

  All integers without prefix are in base 10
  Integers prefixed with '0x' are in base 16

  [low high] notation represents little endian byte sequences

  By conventions escape sequences start with [0x1B 0x02]


-- Memory Layout --

  0x0000 - 0x007F -- DCC and Device Registers
  0x0080 - 0x00FF -- Reserved
  0x0100 - 0xFFFF -- Random Access Memory

  TO-CONSIDER
    Having program memory start from 0x0000 might be helpful
    That way we for first page access you could zero C register

  Reading from and writing to memory outside of RAM is undefined, use device read and write instructions instead


-- Registers --

  There's 9 registers available, all of which are 8 bit
  Last three (Flags and Program Counter) are reserved for CPU, others are general purpose, but have different capabilities

  Here's the list of intended usages for each register:
    General:
      0 -- A  -- Accumulator / Result
      1 -- B  -- Address Low / Counter
      2 -- C  -- Address High / Counter
      3 -- D  -- Device Address
    Stack:
      4 -- SL  -- Stack Pointer Low
      5 -- SH  -- Stack Pointer High
    Status:
      6 -- F  -- Flags
        First bit: Logic / Branch
        Second bit: Carry / Overflow / Underflow
        Rest: Reserved
    PC:
      7 -- PL -- Program Counter Low
      8 -- PH -- Program Counter High

  *On startup it's guaranteed that A B C D F registers will all have 0x00 stored
  *On startup it's guaranteed that [PL PH] will have 0x0100 value to start execution at
  *On startup it's guaranteed that [SL SH] will have highest point in RAM (0xFFFF)
  *Design allows more for registers, but new instructions must be implemented to utilize them, check devices for availability


-- Standard Instructions --

  TODO
    Keep up to date

  0x00 -- Move 0x00 to A
  0x01 -- Push immediate byte to A

  0x02 -- Increment A, sets F to 0x01 on overflow and 0x00 otherwise
  0x03 -- Decrement A, sets F to 0x01 on underflow and 0x00 otherwise

  xxxx -- Increment [B C] registers treating them as word, sets F to 0x01 on overflow and 0x00 otherwise
  xxxx -- Decrement [B C] registers treating them as word, sets F to 0x01 on underflow and 0x00 otherwise

  xxxx -- Flip first bit of F register

  0x04 -- Add immediate byte to A, sets F to 0x01 on overflow and 0x00 otherwise
  0x05 -- Add contents of B to A, sets F to 0x01 on overflow and 0x00 otherwise

  0x06 -- Subtract immediate byte from A, sets F to 0x01 on underflow and 0x00 otherwise
  0x07 -- Subtract contents of B from A, sets F to 0x01 on underflow and 0x00 otherwise

  0x08 -- Multiply A by immediate byte, sets F to 0x01 on overflow and 0x00 otherwise
  0x09 -- Multiply A by contents of B, sets F to 0x01 on overflow and 0x00 otherwise

  0x0A -- Integer division of A by immediate byte
  0x0B -- Integer division of A by contents of B

  0x0A -- Modulo division of A by immediate byte
  0x0B -- Modulo division of A by contents of B

  0x0C -- Equality comparison of A with immediate byte, status register is set to 0x01 when they're equal and 0x00 otherwise
  0x0C -- Equality comparison of A and B, status register is set to 0x01 when they're equal and 0x00 otherwise

  0x0E -- Greater than comparison of A and B, status register is set to 0x01 when A is greater than B and 0x00 otherwise

  0x20 -- Move A to B
  0x21 -- Move A to C
  0x21 -- Move A to D
  0x23 -- Move A to SL
  0x24 -- Move A to SH
  xxxx -- Move A to F
  xxxx -- Move memory at [B C] to A

  0x25 -- Move B to A
  0x26 -- Move C to A
  0x26 -- Move D to A
  0x28 -- Move SL to A
  0x29 -- Move SH to A
  xxxx -- Move F to A

  xxxx -- Move A to an absolute address from immediate bytes
  0x2A -- Move A to an absolute address that is composed from [B C] registers

  xxxx -- Read A from an absolute address from immediate bytes
  0x2E -- Read A from an absolute address that is composed from [B C] registers

  xxxx -- Unconditional jump to an absolute address from immediate bytes
  0x32 -- Unconditional jump to an absolute address that is composed from [B C] registers

  xxxx -- Conditional jump on F register == 0x01 to an absolute address from immediate bytes
  0x36 -- Conditional jump on F register == 0x01 to an absolute address that is composed from [B C] registers

  0x3B -- Unconditional relative jump by immediate byte, value treated as signed
  0x3A -- Unconditional relative jump by A register, value treated as signed

  0x3B -- Conditional relative jump on F register == 0x01 by immediate byte, value treated as signed
  0x3A -- Conditional relative jump on F register == 0x01 by contents of A register, value treated as signed

  xxxx -- Push A to stack, decrementing the [SL SH] registers
  xxxx -- Pull from stack to A, incrementing the [SL SH] registers

  xxxx -- Jump to subroutine from immediate absolute address, while storing position of next instruction into the [SL SH] registers
  xxxx -- Jump to subroutine from address composed from [B C] registers, while storing position of next instruction into the [SL SH] registers

  xxxx -- Return from subroutine by jumping to address stored at [SL SH] registers after decrementing the stack pointer

  xxxx -- Device write where contents of D is a device address and immediate byte is sent
  0x40 -- Device write where contents of D is a device address and A is sent
  0x40 -- Device write where contents of D is a device address and memory at [B C] is sent

  0x41 -- Device read where contents of D is a device address and A is result
  0x41 -- Device read where contents of D is a device address and [B C] is address to store the result


  TO-CONSIDER
    -- Native way of looping with specifying the predicate instruction
    -- Device interrupts for escaping the loops in device driven logic
       For example, while writing string you might not need to compare with 0x00 in the program and expect that device itself will tell when to stop


-- Device Overview --

  TZN platform is driven by flexible device system that allows to run programs on pretty much any hardware
  To get available devices and communicate with them you need to rely on Device Control Chip (abbreviated as DCC)
  It's register address is 0x007F and it's available for both writing and reading

  Every device has id which is represented by null terminated string
  Standard devices reserve some names, but otherwise they could be used by vendors to implement specific device identifications


-- Standard Devices --

  Important note: standard devices only guarantee to respond to cpu in specified manner, but external effects of commands aren't guaranteed
  You can be sure that anything on which program execution is dependent will be the same between implementations, but not effect that come from devices themselves
  For example, cursor visibility setting of terminal might not change anything on user screen


  "trm"
    One of the most reliably available devices for user communication, if "trm-chmp" device available it could even by used for graphics drawing
    On startup cursor is visible and it's position is at (0, 0)
    There's no guarantee on the size of terminal display nor a way to set it, which is deliberate choice for the sake of portability
    By convention default character set is ASCII

    Commands:
      0x00 -- Reset
      0x10 -- Set cursor horizontal position, follow with 1 byte
      0x11 -- Set cursor vertical position, follow with 1 byte
      0x12 -- Set cursor visibility, follow with 1 byte, bool
      0x13 -- Put character at cursor position and then move it forward, follow with 1 byte representing character
      0x14 -- Put terminal into string output mode. Every sequential write will be interpreted as 0x13 put character command until 0x00 is encountered
              Implementations are free to update screen only after string was delivered or on each character
      0x20 -- Respond with display size, followed by 2 bytes, first byte is horizontal size, second byte is vertical
      0x21 -- Respond with character at given position
              Position is encoded by 2 bytes (horizontal, vertical) followed after initial 0x20 byte
              After that device responds with character byte

      TO-CONSIDER
        Optional specification of color attributes akin to VGA / VESA text mode
        Tho probably quite limited, for example, without guarantee that colors will mean something specific, but rather that they will try to be distinct


  "trm-chmp"
    Memory chip containing glyph and palette data used by "term" device
    Could be used for implementing custom fonts or graphics for extended ascii characters (past 0x7f)

    TODO


  "kbt"
    Text keyboard which output corresponds to ascii characters

    Commands:
      0x00 -- Reset (Clears buffer)
      0x10 -- Respond with key non-blockingly, it will return 0x00 if no key is pressed


  "pms"
    Plain mouse device

    Commands:
      0x00 -- Reset
      0x10 -- Respond with horizontal position, followed by 2 bytes
      0x11 -- Respond with vertical position, followed by 2 bytes
      0x20 -- Respond with press status of button 1, followed by 1 byte, bool
      0x21 -- Respond with press status of button 2, followed by 1 byte, bool
      0x22 -- Respond with press status of button 3, followed by 1 byte, bool
      0x23 -- Respond with scroll status of wheel button, followed by 1 byte (0x00 for no scroll, 0x01 for up, 0x02 for down)


  "drv"
    Minimalist external memory device which might be used for writing or reading
    It's guaranteed that its memory is persistent between power downs

    Commands:
      TODO


  "ram"
    External RAM device that could be used for extension of TZN capabilities
    As it only has 16 bit data bus - initial RAM is rather limited, especially for programs that need graphics, audio or other data
    Such device might allow streaming on demand, even for executing code

    Commands:
      TODO


  "clc"
    Standard clock
    It is wrapping every 65535 milliseconds or ~65 seconds as counter only has 2 byte resolution
    Its counter on startup is equal to 0x0000

    Commands:
      0x00 -- Reset
      0x01 -- Respond with counter, followed by 2 bytes representing milliseconds


  "osc"
    Simplistic oscillator ("beeper") device

    Commands:
      TODO


  "ctr"
    Power controller that allows stopping or restarting the execution while also providing minimal information about system

    Commands:
      0x01 -- Shutdown
      0x02 -- Restart (CPU + Devices)

    TO-CONSIDER
      -- Battery status command


-- DCC Command Sequences --

  0x00 -- Reset
    Clears DCC message buffer and resets all logic as it was on startup

  0x01 -- Search device
    Puts DCC into device searching sequence
    It will treat every following byte as character in device id to search until 0x00 (null) is encountered
    Then 2 bytes pushed to buffer to be read containing the device address or 0 value to signal failure
    *It's guaranteed that device searching buffer is at least 8 bytes long, last null character will not be placed in there

  0x02 -- List devices
    Makes DCC output every device name available by sending bytes of null strings
    When empty string is passed - no more devices are available
    If you're searching for a particular device and found, but don't want to exhaust full output then write 0x00 reset byte to DCC


-- Why CISC? --
  Mostly for resulting in more human readable, "declarative" assembly
  Also in memory and register count restricted environment it's more beneficial
  6502 based CPUs don't have particularly good bit manipulation capabilities, so using instruction encoding could be quite costly
